%YAML 1.2
---
name: MrCleansTodo
file_extensions: [todo]
scope: text # default scope assigned to all text

# Sublime docs: https://www.sublimetext.com/docs/3/syntax.html

# `ctrl + shift + p` shows the scope of the current text in an editor

# colors:
# - <COLOR_HERE> for days
# - <COLOR_HERE> for times
# - green for "done-y" things
# - blue for "todo-y" things
# - red for unresolved things "???"
# - red for important reminders "!!!"

variables:
  # support variables
  numberAfterCheckbox: '( [\dX]+([/:,\-\.][\dX]+)*)?' # [x] 127 [x] 1/3 [x] 13:45 [x] 2018-01-19 [x] 1.0.2 [x] 27,310,55

  # delimiter
  delimiterTitle: '[0-9A-Za-zÆØÅæøå \.\,\-_]+'
  delimiterLine: '[-=]{3,}'
  # errors
  errorMaxLen: '^.{81,}$' # more then 80 chars
  errorMaxLenTab: '^\t.{77,}$' # yes, these are a hack, can't think of any other way to do it without proper math
  errorMaxLenTabTab: '^\t{2}.{73,}$'
  errorMaxLenTabTabTab: '^\t{3}.{69,}$'
  errorMaxLenTabTabTabTab: '^\t{4}.{65,}$'
  errorMaxLenTabTabTabTabTab: '^\t{5}.{61,}$'
  errorSpaceNotTab: '^\s* \s*.*$' # tabs over spaces reduces risk of misalignment
  errorMultiSpace: '^.* {2,}.*$' # multiple consecutive spaces used anywhere in a line
  errorOptionSpace: '^.*? .*?$' # `option + space` used anywhere in a line
  errorMissingSpace: '^\t*(\[x\]|:::|\[ \]|- -|\+\+\+|\>\>\>)\S' # missing space after checkbox "[x]nospace"
  errorCommaAfterCheckbox: '^\t*\[[x ]\] .*,$' # checkbox line with a comma at the end
  # day, date, time
  day: '^((man|tirs|ons|tors|fre|lør|søn)dag|(mon|tues|wednes|thurs|fri|satur|sun)day) \d\d\.\d\d\.\d\d' # use inside regex: {{day}}
  time: '(00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|[0-9])(\:[0-5][0-9])?'
  # done
  checkedCheckbox: '^\t*\[x\]{{numberAfterCheckbox}}'
  contextual: '^\t*:::{{numberAfterCheckbox}}'
  # todo
  emptyCheckbox: '^\t*\[ \]{{numberAfterCheckbox}}'
  deletable: '^\t*\- \-{{numberAfterCheckbox}}'
  recurring: '^\t*\+\+\+{{numberAfterCheckbox}}'
  future: '^\t*\>\>\>{{numberAfterCheckbox}}'
  # highlight
  unanswered: '\?{3,}'
  reminder: '^\t*!!!( .*)?'
  nsfw: '\b[Nn][Ss][Ff][Ww]\b'
  # day tags
  gamification: '\~ (Supereffektiv|Ninjaeffektiv|Godlike|Lucy)' # before stories because precedence
  stories: '\~.*$'
  # nontodo context
  emptyMultiCheckbox: '^\t*\[ +\] '
  partialMultiCheckbox: '^\t*\[x+ +\] '
  checkedMultiCheckbox: '^\t*\[x+\] '
  voidedMultiCheckbox: '^\t*\[v+\] '

contexts:

  main:

    # enter 'comment' context
    - match: '(^|\s)"'
      push: comment

    # enter 'nonTodo' context with a line like: --- start of that context ---
    - match: '^{{delimiterLine}} {{delimiterTitle}} {{delimiterLine}}$'
      scope: delimiter.context
      push: nonTodo
    # delimiter lines
    - match: '^{{delimiterLine}}$'
      scope: delimiter.line

    # errors (placed first to take precedence)
    - match: '{{errorMaxLen}}|{{errorMaxLenTab}}|{{errorMaxLenTabTab}}|{{errorMaxLenTabTabTab}}|{{errorMaxLenTabTabTabTab}}|{{errorMaxLenTabTabTabTabTab}}'
      scope: error
    - match: '{{errorSpaceNotTab}}'
      scope: error
    - match: '{{errorMultiSpace}}'
      scope: error
    - match: '{{errorOptionSpace}}'
      scope: error
    - match: '{{errorMissingSpace}}'
      scope: error
    - match: '{{errorCommaAfterCheckbox}}'
      scope: error
    # day, date, time
    - match: '{{day}}'
      scope: day
    - match: ' ([Kk]l|[Aa]t) {{time}}( - {{time}})?'
      scope: time
    # done
    - match: '{{checkedCheckbox}}'
      scope: done.checkedcheckbox
    - match: '{{contextual}}'
      scope: done.contextual
    # todo
    - match: '{{emptyCheckbox}}'
      scope: todo.emptycheckbox
    - match: '{{deletable}}'
      scope: todo.deletable
    - match: '{{recurring}}'
      scope: todo.recurring
    - match: '{{future}}'
      scope: todo.future
    # highlight
    - match: '{{unanswered}}'
      scope: highlight.unanswered
    - match: '{{reminder}}'
      scope: highlight.reminder
    - match: '{{nsfw}}'
      scope: highlight.nsfw
    # day tags
    - match: '{{gamification}}'
      scope: tag.gamification
    - match: '{{stories}}'
      scope: tag.stories

    # my personal onthology begins here

    # personal
    - match: '\b(?i)(arkiv|bilder|bolig|helse|juridisk|læring|låst|multimedia|permen|prosjekter|sosialt|tanker|trene|økonomi)\b'
      scope: personal
    # TODO: is "permen" really a proper personal category?
    # TODO: is "prosjekter" really a proper personal category?
    # TODO: is "sosialt" really a proper personal category? Think so

    # professional
    - match: '\b(?i)(difi|elv|evalass|gkprog|knowit|ntnus|peppes|qzp|sand)\b'
      scope: professional.work
    - match: '\b(?i)(cheesy squad|cv|fag|rekruttering|salg|trio|digikult|kf|gm|tsf|twc)\b'
      scope: professional.work.knowit
    - match: '\b(?i)(coo|hoc|hog|hom|hot|pan)\b'
      scope: professional.work.elv

  # context for comments
  # (also covers comment scope for all other languages, which is handy)
  comment:
    - meta_scope: comment
    #- match: \\" # escaped quote mark
    #  scope: comment
    - match: '"'
      pop: true

  # context for ramblings, wish lists, what have you
  nonTodo:

    # exit 'nonTodo' context with a line like: --- end of that context ---
    - match: '^{{delimiterLine}} {{delimiterTitle}} {{delimiterLine}}$'
      scope: delimiter.context
      pop: true
    # delimiter lines
    - match: '^{{delimiterLine}}$'
      scope: delimiter.line

    # title
    - match: '^# .*$'
      scope: nontodo.title
    # list
    - match: '^\t*(\-|\+|\*|\d+\.?) '
      scope: nontodo.list
    # multi checkbox
    - match: '{{emptyMultiCheckbox}}'
      scope: nontodo.emptyMultiCheckbox
    - match: '{{partialMultiCheckbox}}'
      scope: nontodo.partialMultiCheckbox
    - match: '{{checkedMultiCheckbox}}'
      scope: nontodo.checkedMultiCheckbox
    - match: '{{voidedMultiCheckbox}}'
      scope: nontodo.voidedMultiCheckbox
